
    /*
     1/4 + 2/4 = 6 / 8 = 3 / 4
     a        c         (a * d) + (c * b)       
    ----  + -----   =  ------------------
     b        d             b * d
     */


1. Addition 

    class MyUtil
    {
        public static int FindGCD(int a, int b) //HCF
        {
            while (a != b)
            {
                if (a > b)
                    a -= b;
                else
                    b -= a;
            }
            return a;
        }
    }
    class RationalNumber 
    {
        public int Numerator { get; set; }
        private int denominator;
        public int Denominator 
        { 
            get 
            { 
                return denominator; 
            } 
            set 
            {
                if (denominator == 0)
                {
                    denominator = 1;
                }
                denominator = value; 
            }  
        }

        public RationalNumber(int _numerator, int _denominator)
        {
            // throw ERR this.Denominator = 0
            if(_denominator == 0)
            {
                _denominator = 1;
            }
            this.Numerator = _numerator;
            this.Denominator = _denominator;
        }
        public RationalNumber Add(RationalNumber other)
        {
            RationalNumber sum = new RationalNumber(0,0);
            sum.Numerator = (this.Numerator * other.Denominator) + (other.Numerator * this.Denominator);
            sum.Denominator = this.Denominator * other.Denominator;

            int gcd = MyUtil.FindGCD(sum.Numerator, sum.Denominator);
            sum.Numerator = sum.Numerator / gcd;
            sum.Denominator = sum.Denominator / gcd;
            return sum;
        }
        
        public override string ToString()
        {
            return $"[{Numerator} / {Denominator}]";
        }

    }
    internal class TestComplexNumber
    {
        static void Main(string[] args)
        {
            //Console.WriteLine($"gcd(6, 12) = {MyUtil.FindGCD(6, 12)}");

            RationalNumber firstNo = new RationalNumber(1, 4);
            RationalNumber secondNo = new RationalNumber(1, 2);
            RationalNumber result = firstNo.Add(secondNo);
            Console.WriteLine($"{firstNo} + {secondNo} = {result}");

        }
    }
	
	

	
	
	
	
--------------------------------------------------------------------------------------------------------------------------------------
2. Subtraction 
	
	
class MyUtil
{
    public static int FindGCD(int a, int b) // HCF
    {
        while (a != b)
        {
            if (a > b)
                a -= b;
            else
                b -= a;
        }
        return a;
    }
}

class RationalNumber
{
    public int Numerator { get; set; }
    private int denominator;
    public int Denominator
    {
        get { return denominator; }
        set
        {
            if (value == 0)
            {
                value = 1; // Default to 1 if denominator is set to 0
            }
            denominator = value;
        }
    }

    public RationalNumber(int _numerator, int _denominator)
    {
        if (_denominator == 0)
        {
            _denominator = 1;
        }
        this.Numerator = _numerator;
        this.Denominator = _denominator;
    }

    public RationalNumber Subtract(RationalNumber other)
    {
        RationalNumber difference = new RationalNumber(0, 0);
        difference.Numerator = (this.Numerator * other.Denominator) - (other.Numerator * this.Denominator);
        difference.Denominator = this.Denominator * other.Denominator;

        int gcd = MyUtil.FindGCD(difference.Numerator, difference.Denominator);
        difference.Numerator = difference.Numerator / gcd;
        difference.Denominator = difference.Denominator / gcd;
        return difference;
    }

    public override string ToString()
    {
        return $"[{Numerator} / {Denominator}]";
    }
}

internal class TestRationalNumber
{
    static void Main(string[] args)
    {
        RationalNumber firstNo = new RationalNumber(3, 4);
        RationalNumber secondNo = new RationalNumber(1, 2);
        RationalNumber result = firstNo.Subtract(secondNo);
        Console.WriteLine($"{firstNo} - {secondNo} = {result}");
    }
}






--------------------------------------------------------------------------------------------------------------------------------------

3. Multiplication  

class MyUtil
{
    public static int FindGCD(int a, int b) // HCF
    {
        while (a != b)
        {
            if (a > b)
                a -= b;
            else
                b -= a;
        }
        return a;
    }
}

class RationalNumber
{
    public int Numerator { get; set; }
    private int denominator;
    public int Denominator
    {
        get { return denominator; }
        set
        {
            if (value == 0)
            {
                value = 1; // Default to 1 if denominator is set to 0
            }
            denominator = value;
        }
    }

    public RationalNumber(int _numerator, int _denominator)
    {
        if (_denominator == 0)
        {
            _denominator = 1;
        }
        this.Numerator = _numerator;
        this.Denominator = _denominator;
    }

    public RationalNumber Multiply(RationalNumber other)
    {
        RationalNumber product = new RationalNumber(0, 0);
        product.Numerator = this.Numerator * other.Numerator;
        product.Denominator = this.Denominator * other.Denominator;

        int gcd = MyUtil.FindGCD(product.Numerator, product.Denominator);
        product.Numerator = product.Numerator / gcd;
        product.Denominator = product.Denominator / gcd;
        return product;
    }

    public override string ToString()
    {
        return $"[{Numerator} / {Denominator}]";
    }
}

internal class TestRationalNumber
{
    static void Main(string[] args)
    {
        RationalNumber firstNo = new RationalNumber(3, 4);
        RationalNumber secondNo = new RationalNumber(2, 5);
        RationalNumber result = firstNo.Multiply(secondNo);
		
        Console.WriteLine($"{firstNo} * {secondNo} = {result}");
    }
}

		
		
	
		
-----------------------------------------------------------------------------------------------------------------------------------------


4. Division


class MyUtil
{
    public static int FindGCD(int a, int b) // HCF
    {
        while (a != b)
        {
            if (a > b)
                a -= b;
            else
                b -= a;
        }
        return a;
    }
}

class RationalNumber
{
    public int Numerator { get; set; }
    private int denominator;
    public int Denominator
    {
        get { return denominator; }
        set
        {
            if (value == 0)
            {
                value = 1; // Default to 1 if denominator is set to 0
            }
            denominator = value;
        }
    }

    public RationalNumber(int _numerator, int _denominator)
    {
        if (_denominator == 0)
        {
            _denominator = 1;
        }
        this.Numerator = _numerator;
        this.Denominator = _denominator;
    }

    public RationalNumber Divide(RationalNumber other)
    {
        RationalNumber quotient = new RationalNumber(0, 0);
        quotient.Numerator = this.Numerator * other.Denominator;
        quotient.Denominator = this.Denominator * other.Numerator;

        int gcd = MyUtil.FindGCD(quotient.Numerator, quotient.Denominator);
        quotient.Numerator = quotient.Numerator / gcd;
        quotient.Denominator = quotient.Denominator / gcd;
        return quotient;
    }

    public override string ToString()
    {
        return $"[{Numerator} / {Denominator}]";
    }
}

internal class TestRationalNumber
{
    static void Main(string[] args)
    {
        RationalNumber firstNo = new RationalNumber(3, 4);
        RationalNumber secondNo = new RationalNumber(2, 5);
        RationalNumber result = firstNo.Divide(secondNo);
        Console.WriteLine($"{firstNo} / {secondNo} = {result}");
    }
}



