public delegate double DCalc(double a, double b);

public class Calculator
{
    public static double Add(double x, double y)
    {
        return x + y;
    }
    
}

internal class Programs
{

    static void Main()
    {
        DCalc rCalc = Calculator.Add;
        Console.WriteLine("sum = {0}", rCalc(10, 20));//30

        
    }
   
}
 ================================================================================================================================================================================================== 
  delegate void DWriteLine(string str);
    internal class Programs
    {
        static void Print(string a)
        {
            Console.WriteLine(a);
        }
        static void Main()
        {
            //Console.WriteLine("Hello World!!!");
            //Console.WriteLine("Hi Ashna!");
            //Console.WriteLine("Hi Collin!");

            DWriteLine wr = Console.WriteLine; //DWriteLine wr = new DWriteLine(Console.WriteLine);
            wr("Hello World!!!");
            wr("Hi Ashna!");
            wr("Hi Collin!");
            

            //DWriteLine rl = Console.ReadLine; //why? //signature of "Console.ReadLine" and "DWriteLine" are not matched
            DWriteLine rPrint = Print;//new DWriteLine(Print)
            rPrint("I am printing...");

            DWriteLine rPrintLettersOneByOne = PrintLettersOneByOne;
            rPrintLettersOneByOne += PrintLettersCount;//multi casting //delegate var refers many functions at a time

            rPrintLettersOneByOne("Obj");

            rPrintLettersOneByOne -= PrintLettersOneByOne;
            rPrintLettersOneByOne("Oriented");
        }

        static void PrintLettersOneByOne(string x)
        {
            foreach(var letter in x)
            {
                Console.WriteLine(letter);
            }
        }
        static void PrintLettersCount(string x) //Note: Dont use Length function 
        {
            int c = 0;
            foreach (var letter in x)
            {
                c++;
            }
            Console.WriteLine($"Count is {c}");
        }
    }
    ====================================================================================================================================================================================
public delegate double DCalc(double a, double b);
public delegate void DOnAfterSubtract();
public class Calculator
{
    
    public double Subtract(double x, double y, DOnAfterSubtract OnAfterSubtract = null)
    //OnAfterSubtract is the callback function
    {
        double d = x - y;
        if (OnAfterSubtract != null)
        {
            OnAfterSubtract();
        }

        return d;
    }
}

internal class Programs
{

    static void Main()
    {
        Calculator calc1 = new Calculator();
        double d1 = calc1.Subtract(20, 15, OnAfterSubtract1);
        Console.WriteLine($"20-15={d1}");//5

        Calculator calc2 = new Calculator();
        double d2 = calc2.Subtract(20, 3, OnAfterSubtract2);
        Console.WriteLine($"20-3={d2}");//17

        Calculator calc3 = new Calculator();
        double d3 = calc3.Subtract(15, 3);
        Console.WriteLine($"15-3={d3}");//12
    }
    static void OnAfterSubtract1()
    {
        Console.WriteLine("20, 15 Subtraction completed.");
    }
    static void OnAfterSubtract2()
    {
        Console.WriteLine("20, 3 Subtraction completed.");
    }
}
    
